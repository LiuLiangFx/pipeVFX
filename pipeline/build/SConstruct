#!/usr/bin/python 

import sys, os
del os.environ['ROOT']
sys.path.insert( 0, os.path.abspath('../tools/python/') )
import build, pipe

#print dir(ARGUMENTS), ARGUMENTS

allPythonVersions = pipe.libsDB()['python']['versions']


#gmp = build.configure(
#        ARGUMENTS,
#        'gmp',
#        download=[
#          (
#            'https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2',
#            'gmp-6.0.0.tar.gz',
#            '6.0.0',
#            'b7ff2d88cae7f8085bd5006096eed470'
#          ),
#        ],
#)
#build.allDepend.append(gmp)
#mpc = build.configure(
#        ARGUMENTS,
#        'mpc',
#        download=[
#          (
#            'ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz',
#            'mpc-1.0.3.tar.gz',
#            '1.0.3',
#            'd6a1d5f8ddea3abd2cc3e98f58352d26'
#          ),
#        ],
#)
#build.allDepend.append(mpc)
#mpfr = build.configure(
#        ARGUMENTS,
#        'mpfr',
#        download=[
#          (
#            'http://www.mpfr.org/mpfr-current/mpfr-3.1.2.tar.gz',
#            'mpfr-3.1.2.tar.gz',
#            '3.1.2',
#            '181aa7bb0e452c409f2788a4a7f38476'
#          ),
#        ],
#)
#build.allDepend.append(mpfr)

#gcc = build.configure(
#        ARGUMENTS,
#        'gcc',
#        download=[
##          (
##            'http://gcc.parentingamerica.com/releases/gcc-4.1.2/gcc-4.1.2.tar.gz',
##            'gcc-4.1.2.tar.gz',
##            '4.1.2',
##            'dd2a7f4dcd33808d344949fcec87aa86'
##          ),
#          (
#            'http://gcc.parentingamerica.com/releases/gcc-4.4.7/gcc-4.4.7.tar.gz',
#            'gcc-4.4.7.tar.gz',
#            '4.4.7',
#            'a755ac748de31dee53a39f54a0adacaf'
#          ),
##          (
##            'http://gcc.parentingamerica.com/releases/gcc-4.6.0/gcc-4.6.0.tar.gz',
##            'gcc-4.6.0.tar.gz',
##            '4.6.0',
##            '009f59ee0f9c8100c12939140698cf33'
##          ),
#        ],
#        compiler = build.gcc.system,
#        cmd = [
#            "mkdir -p build && cd build && "
#            "PATH=/usr/bin:$PATH LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/ "
#            "../configure  --enable-tls --enable-languages=c,c++ --without-libjava "
#            "--without-gcj --with-multilib-list=m64 --disable-multilib "
#            "--with-sysroot=$TARGET_FOLDER/sys_root/",
            
#            "mkdir -p build && cd build && "
#            "PATH=/usr/bin:$PATH LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/"
#            "make && make -j $DCORES install",
#        ]
#)
#build.allDepend.append(gcc)



zlib = build.configure(
        ARGUMENTS,
        'zlib',
        download=[
          (
            'http://zlib.net/zlib-1.2.8.tar.gz',
            'zlib-1.2.8.tar.gz',
            '1.2.8',
            '44d667c142d7cda120332623eab69f40'
          ),
        ],
)
build.allDepend.append(zlib)

openssl = build.openssl(
        ARGUMENTS,
        'openssl',
        download=[
          (
            'ftp://ftp.openssl.org/source/openssl-1.0.2a.tar.gz',
            'openssl-1.0.2a.tar.gz',
            '1.0.2.a',
            'a06c547dac9044161a477211049f60ef'
          ),
        ],
)
build.allDepend.append(openssl)

ncurses = build.configure(
        ARGUMENTS,
        'ncurses',
        download=[
          (
            'http://ftp.gnu.org/pub/gnu/ncurses/ncurses-5.9.tar.gz',
            'ncurses-5.9.tar.gz',
            '5.9.0',
            '8cb9c412e5f2d96bc6f459aa8c6282a1'
          ),
        ],
        cmd=[
            './configure --with-shared',
            'make -j $DCORES && make -j $DCORES install',
        ]
)
build.allDepend.append(ncurses)

#glibc = build.configure(
#        ARGUMENTS,
#        'glibc',
#        download=[
#          (
#            'http://git.savannah.gnu.org/cgit/hurd/glibc.git/snapshot/glibc-2.19-hurd+libpthread-20150515.tar.gz',
#            'glibc-2.19-hurd+libpthread-20150515.tar.gz',
#            '2.19.20150515.hurd_libpthread',
##            '9bfb3bfd3e5426e7a2a537de18712d72'
#            '9b048b697abe51a5a9965673873754b1'
#          ),
#        ],
#        cmd = [
#            "mkdir -p build && cd build && PATH=/usr/bin:$PATH CFLAGS='' CXXFLAGS='' ../configure",
#            "mkdir -p build && cd build && PATH=/usr/bin:$PATH CFLAGS='' CXXFLAGS='' make && PATH=/usr/bin:$PATH make install",
#        ]
#)
#build.allDepend.append(glibc)

readline = build.configure(
        ARGUMENTS,
        'readline',
        download=[
          (
            'ftp://ftp.cwru.edu/pub/bash/readline-6.3.tar.gz',
            'readline-6.3.tar.gz',
            '6.3.0',
            '33c8fb279e981274f485fd91da77e94a'
          ),
        ],
)
build.allDepend.append(readline)

python = build.configure(
        ARGUMENTS,
        'python',
        download=[
          (
            'https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz',
            'Python-2.7.10.tar.gz',
            '2.7.10',
            'd7547558fd673bd9d38e2108c6b42521'
          ),
        ],
)

tbb = build.tbb(
        ARGUMENTS,
        'tbb',
        download=[
          (
            'http://http.debian.net/debian/pool/main/t/tbb/tbb_3.0+r035.orig.tar.gz',
            'tbb30_035oss.tar.gz',
            '3.0.r035',
            '86d2f05a06b0e53e71afb5378582f104',
          ),
          (
            'http://http.debian.net/debian/pool/main/t/tbb/tbb_4.2~20140122.orig.tar.gz',
            'tbb42_20140122oss.tar.gz',
            '4.2.r20140122oss',
            '70345f907f5ffe9b2bc3b7ed0d6508bc',
          ),
        ],
)
build.allDepend.append(tbb)

cython = build.pythonSetup(
        ARGUMENTS,
        'cython',
        download=[
          (
            'https://github.com/cython/cython/archive/0.22.tar.gz',
            'cython-0.22.tar.gz',
            '0.22.0',
            'e67b03e8b3667c8e4e7c774ef2e2b638'
          ),
        ],
        python=allPythonVersions,
)
build.allDepend.append(cython)

numpy = build.pythonSetup(
        ARGUMENTS,
        'numpy',
        download=[
          (
            'https://github.com/numpy/numpy/archive/v1.9.2.tar.gz',
            'numpy-1.9.2.tar.gz',
            '1.9.2',
            '90f7434759088acccfddf5ba61b1f908'
          ),
        ],
        python=allPythonVersions,
#        depend=[cython],
#        GCCFLAGS=[cython],
)
build.allDepend.append(numpy)

curl = build.configure(
        ARGUMENTS,
        'curl',
        download=[
          (
            'http://curl.haxx.se/download/curl-7.42.1.tar.gz',
            'curl-7.42.1.tar.gz',
            '7.42.1',
            '8df5874c4a67ad55496bf3af548d99a2'
          ),
        ],
)
build.allDepend.append(curl)

cmake = build.configure(
        ARGUMENTS,
        'cmake',
        download=[
          (
            'http://www.cmake.org/files/v3.2/cmake-3.2.2.tar.gz',
            'cmake-3.2.2.tar.gz',
            '3.2.2',
            '2da57308071ea98b10253a87d2419281'
          ),
        ],
        cmd = [ 
            "./configure --system-curl",
            "./Bootstrap.cmk/cmake "
            ' -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS -lssl"'
            ' -DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS -lssl"'
            ' -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS -lssl"',   
            "make VERBOSE=1"
            ' CMAKE_EXE_LINKER_FLAGS="$LDFLAGS -lssl"'
            ' CMAKE_MODULE_LINKER_FLAGS="$LDFLAGS -lssl"'
            ' CMAKE_SHARED_LINKER_FLAGS="$LDFLAGS -lssl"',   
            "make install",
        ],
)
build.allDepend.append(cmake)

freeglut = build.configure(
        ARGUMENTS,
        'freeglut',
        download=[
          (
            'http://downloads.sourceforge.net/project/freeglut/freeglut/2.6.0/freeglut-2.6.0.tar.gz?r=http%3A%2F%2Ffreeglut.sourceforge.net%2Findex.php&ts=1432619050&use_mirror=iweb',
            'freeglut-2.6.0.tar.gz',
            '2.6.0',
            '39f0f2de89f399529d2b981188082218'
          ),
          (
            'http://downloads.sourceforge.net/project/freeglut/freeglut/2.8.1/freeglut-2.8.1.tar.gz?r=http%3A%2F%2Ffreeglut.sourceforge.net%2Findex.php&ts=1432619092&use_mirror=hivelocity',
            'freeglut-2.8.1.tar.gz',
            '2.8.1',
            '918ffbddcffbac83c218bc52355b6d5a',
          ),
#          (
#            'http://downloads.sourceforge.net/project/freeglut/freeglut/3.0.0/freeglut-3.0.0.tar.gz?r=http%3A%2F%2Ffreeglut.sourceforge.net%2Findex.php&ts=1432619114&use_mirror=hivelocity',
#            'freeglut-3.0.0.tar.gz',
#            '3.0.0',
#            '90c3ca4dd9d51cf32276bc5344ec9754',
#          ),
        ],
)
build.allDepend.append(freeglut)

glew = build.glew(
        ARGUMENTS,
        'glew',
        download=[
#          (
#            'https://github.com/nigels-com/glew/archive/glew-1.10.0.tar.gz',
#            'glew-glew-1.10.0.tar.gz',
#            '1.10.0',
#            'a79aa9866d9771546f78d27c8c6ac0df'
#          ),
          (
            'https://github.com/nigels-com/glew/archive/glew-1.12.0.tar.gz',
            'glew-glew-1.12.0.tar.gz',
            '1.12.0',
            'a3d23a760f031fbdde91f010b5bcf5eb'
          ),
        ],
)
build.allDepend.append(glew)

freetype = build.configure(
        ARGUMENTS,
        'freetype',
        download=[
          (
            'http://mirror.csclub.uwaterloo.ca/nongnu//freetype/freetype-2.4.0.tar.gz',
            'freetype-2.4.0.tar.gz',
            '2.4.0',
            'f900148ae8e258803eb1ab9f564f2151'
          ),
          (
            'http://mirror.csclub.uwaterloo.ca/nongnu//freetype/freetype-2.5.5.tar.gz',
            'freetype-2.5.5.tar.gz',
            '2.5.5',
            '7448edfbd40c7aa5088684b0a3edb2b8',
          ),
        ],
)
build.allDepend.append(freetype)

jpeg = build.configure(
        ARGUMENTS,
        'jpeg',
        download=[
          (
            'http://www.ijg.org/files/jpegsrc.v6b.tar.gz',
            'jpeg-6b.tar.gz',
            '6b',
            'dbd5f3b47ed13132f04c685d608a7547'
          ),
          (
            'http://www.ijg.org/files/jpegsrc.v9a.tar.gz',
            'jpeg-9a.tar.gz',
            '9a',
            '3353992aecaee1805ef4109aadd433e7',
          ),
        ],
        cmd = [ 
            './configure --enable-shared --prefix=$TARGET_FOLDER',
            'make install INSTALL="/usr/bin/install -D"',
        ]
)
build.allDepend.append(jpeg)

tiff = build.configure(
        ARGUMENTS,
        'tiff',
        download=[
          (
            'ftp://ftp.remotesensing.org/pub/libtiff/tiff-3.8.2.tar.gz',
            'tiff-3.8.2.tar.gz',
            '3.8.2',
            'fbb6f446ea4ed18955e2714934e5b698'
          ),
          (
            'ftp://ftp.remotesensing.org/pub/libtiff/tiff-4.0.3.tar.gz',
            'tiff-4.0.3.tar.gz',
            '4.0.3',
            '051c1068e6a0627f461948c365290410',
          ),
        ],
        depend=[jpeg],
)
build.allDepend.append(tiff)

#libpng = build.configure(
#        ARGUMENTS,
#        'libpng',
#        download=[
#          (
#            'ftp://ftp.simplesystems.org/pub/libpng/png/src/libpng16/libpng-1.6.17.tar.gz',
#            'libpng-1.6.17.tar.gz',
#            '1.6.17',
#            '134282f1752dcf4cd81a37b8ff421cef'
#          ),
#        ],
#        cmd = [
#            './configure',
#            'make && make install',
#        ]
#)
#build.allDepend.append(libpng)

dbus = build.configure(
        ARGUMENTS,
        'dbus',
        download=[
          (
            'https://pypi.python.org/packages/source/d/dbus-python/dbus-python-0.84.0.tar.gz#md5=fe69a2613e824463e74f10913708c88a',
            'dbus-python-0.84.0.tar.gz',
            '0.84.0',
            'fe69a2613e824463e74f10913708c88a'
          ),
        ],
        python=allPythonVersions,
)
build.allDepend.append(dbus)

# build all simple python modules here.
# since its just a matter of running setup.py (hence "simple"),
# we put all name/version/download infor in a dict for easy maintainance, 
# and run each one through the same pythonSetup builder class, 
# without any special setup.
simpleModules = {
    'epydoc' : [(
            'http://downloads.sourceforge.net/project/epydoc/epydoc/3.0.1/epydoc-3.0.1.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fepydoc%2Ffiles%2Fepydoc%2F3.0.1%2F&ts=1432094792&use_mirror=iweb',
            'epydoc-3.0.1.tar.gz',
            '3.0.1',
            'cdd6f6c76dd8bab5e653a343a0544294'
    )],
    'pygl' : [(
            'https://pypi.python.org/packages/source/P/PyOpenGL/PyOpenGL-3.1.0.tar.gz#md5=0de021941018d46d91e5a8c11c071693',
            'PyOpenGL-3.1.0.tar.gz',
            '3.1.0',
            '0de021941018d46d91e5a8c11c071693'
          ),(
            'https://pypi.python.org/packages/source/P/PyOpenGL/PyOpenGL-3.0.2.tar.gz#md5=77becc24ffc0a6b28030aa109ad7ff8b',
            'PyOpenGL-3.0.2.tar.gz',
            '3.0.2',
            '77becc24ffc0a6b28030aa109ad7ff8b'
    )],
    'pil' : [(
            'http://effbot.org/downloads/Imaging-1.1.7.tar.gz',
            'Imaging-1.1.7.tar.gz',
            '1.1.7',
            'fc14a54e1ce02a0225be8854bfba478e'
    )],    
#    'pygobject' : [(
#            'https://pypi.python.org/packages/source/P/PyGObject/pygobject-2.28.3.tar.bz2#md5=aa64900b274c4661a5c32e52922977f9',
#            'pygobject-2.28.3.tar.gz',
#            '2.28.3',
#            'aa64900b274c4661a5c32e52922977f9'
#    )],    
#    # pythonldap needs libldap2-dev package when running in ubuntu, or else it wont build!
#    'pythonldap' : [(
#            'https://pypi.python.org/packages/source/p/python-ldap/python-ldap-2.4.19.tar.gz#md5=b941bf31d09739492aa19ef679e94ae3',
#            'python-ldap-2.4.19.tar.gz',
#            '2.4.19',
#            'b941bf31d09739492aa19ef679e94ae3'
#    )],    
#    'wxpython' : [(
#            'https://pypi.python.org/packages/source/P/PyOpenGL/PyOpenGL-3.1.0.tar.gz#md5=0de021941018d46d91e5a8c11c071693',
#            'PyOpenGL-3.1.0.tar.gz',
#            '3.1.0',
#            '0de021941018d46d91e5a8c11c071693'
#    )],    
}
# run the builders for each module in the dict
simpleModulesBuilders = []
for module in simpleModules:
    # we store the builder in a local dict first 
    simpleModulesBuilders.append( 
        build.pythonSetup(
            ARGUMENTS,
            module,
            download=simpleModules[module],
            python=allPythonVersions,
        )
    )
# add all builders to the global dependency at once here
# so they can all be built in parallel by scons, since theres no 
# dependency between then. 
build.allDepend.extend( simpleModulesBuilders )
    
boost = build.boost(
        ARGUMENTS,
        'boost',
        download=[
          (
            'http://downloads.sourceforge.net/project/boost/boost/1.56.0/boost_1_56_0.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.56.0%2F&ts=1432347566&use_mirror=iweb',
            'boost_1_56_0.tar.gz',
            '1.56.0',
            '8c54705c424513fa2be0042696a3a162'
          ),
#          (
#            'http://downloads.sourceforge.net/project/boost/boost/1.58.0/boost_1_58_0.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.58.0%2F&ts=1432347909&use_mirror=hivelocity',
#            'boost_1_58_0.tar.gz',
#            '1.58.0',
#            '5a5d5614d9a07672e1ab2a250b5defc5'
#          ),
        ],
        python=allPythonVersions,
)
build.allDepend.append(boost)


ilmbase = build.configure(
        ARGUMENTS,
        'ilmbase',
        download=[(
            'http://download.savannah.nongnu.org/releases/openexr/ilmbase-2.0.0.tar.gz',
            'ilmbase-2.0.0.tar.gz',
            '2.0.0',
            '70f1413840c2a228783d1332b8b168e6'
          ),(
            'http://download.savannah.nongnu.org/releases/openexr/ilmbase-2.2.0.tar.gz',
            'ilmbase-2.2.0.tar.gz',
            '2.2.0',
            'b540db502c5fa42078249f43d18a4652'
          ),(
            'http://download.savannah.nongnu.org/releases/openexr/ilmbase-2.1.0.tar.gz',
            'ilmbase-2.1.0.tar.gz',
            '2.1.0',
            '8ba2f608191ad020e50277d8a3ba0850'
        )],
)
openexr = build.configure(
        ARGUMENTS,
        'openexr',
        download=[(
            'http://download.savannah.nongnu.org/releases/openexr/openexr-2.0.0.tar.gz',
            'openexr-2.0.0.tar.gz',
            '2.0.0',
            '0820e1a8665236cb9e728534ebf8df18'
          ),
#          (
#            'http://download.savannah.nongnu.org/releases/openexr/openexr-2.2.0.tar.gz',
#            'openexr-2.2.0.tar.gz',
#            '2.2.0',
#            'b64e931c82aa3790329c21418373db4e',
#          ),
          (
            'http://download.savannah.nongnu.org/releases/openexr/openexr-2.1.0.tar.gz',
            'openexr-2.1.0.tar.gz',
            '2.1.0',
            '33735d37d2ee01c6d8fbd0df94fb8b43',
        )],
        depend=[ilmbase],
)

pyilmbase = build.configure(
        ARGUMENTS,
        'pyilmbase',
        download=[
          (
            'http://download.savannah.gnu.org/releases/openexr/pyilmbase-2.0.0.tar.gz',
            'pyilmbase-2.0.0.tar.gz',
            '2.0.0',
            '4585eba94a82f0b0916445990a47d143'
          ),
          (
            'http://download.savannah.gnu.org/releases/openexr/pyilmbase-2.2.0.tar.gz',
            'pyilmbase-2.2.0.tar.gz',
            '2.2.0',
            'e84a6a4462f90b5e14d83d67253d8e5a'
          ),
          (
            'http://download.savannah.gnu.org/releases/openexr/pyilmbase-2.1.0.tar.gz',
            'pyilmbase-2.1.0.tar.gz',
            '2.1.0',
            'af1115f4d759c574ce84efcde9845d29'
          ),          
        ],
        python=allPythonVersions,
        depend=[ilmbase,openexr],
)
build.allDepend.append(ilmbase)
build.allDepend.append(openexr)
build.allDepend.append(pyilmbase)



# Sony Imageworks packages
hdf5 = build.configure(
        ARGUMENTS,
        'hdf5',
        download=[
          (
            'http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.8.15.tar.gz',
            'hdf5-1.8.15.tar.gz',
            '1.8.15',
            '03cccb5b33dbe975fdcd8ae9dc021f24'
          ),
        ],
)
build.allDepend.append(hdf5)

alembic = build.cmake(
    ARGUMENTS,
    'alembic',
    download=[
      (
        'https://github.com/alembic/alembic/archive/1.5.8.tar.gz',
        'alembic-1.5.8.tar.gz',
        '1.5.8',
        'a70ba5f2e80b47d346d15d797c28731a'
      ),
    ],
    python=allPythonVersions,
    # alembic has some hard-coded path to find python, and the only
    # way to make it respect the PYTHON related environment variables,
    # is to patch some files to force it!
    sed = {
        '0.0.0' : {
            'python/PyAbcOpenGL/CMakeLists.txt' : [
                ('SET(.*PYTHON_INCLUDE_DIR','#SET( PYTHON_INCLUDE_DIR'),
                ('SET(.*ALEMBIC_PYTHON_ROOT','#SET( ALEMBIC_PYTHON_ROOT'),
                ('/usr/include/python','${PYTHON_ROOT}/include/python'),
            ],
            'python/PyAlembic/CMakeLists.txt' : [
                ('SET(.*PYTHON_INCLUDE_DIR','#SET( PYTHON_INCLUDE_DIR'),
                ('SET(.*ALEMBIC_PYTHON_ROOT','#SET( ALEMBIC_PYTHON_ROOT'),
                ('/usr/include/python','${PYTHON_ROOT}/include/python'),
            ],
            'CMakeLists.txt' : [
                ('/alembic-${VERSION}',' '),
            ],
        },
    },
)


llvm = build.configure(
        ARGUMENTS,
        'llvm',
        download=[
          (
            'http://llvm.org/releases/3.4.2/llvm-3.4.2.src.tar.gz',
            'llvm-3.4.2.src.tar.gz',
            '3.4.2',
            'a20669f75967440de949ac3b1bad439c'
          ),
        ],
        # llvm needs a newer GCC than 4.1.2, which we use in the pipe, unfortunatelly.
        # so we're forced to rely on the system gcc here,
        # hence the /usr/bin added to the top of PATH in the cmd
        compiler = build.gcc.system,
#        cmd=[
#            'PATH=/usr/bin:$PATH ./configure',
#            'PATH=/usr/bin:$PATH make -j $DCORES && make install',
#        ],
)
osl = build.cmake(
        ARGUMENTS,
        'osl',
        download=[
          (
            'https://github.com/imageworks/OpenShadingLanguage/archive/Release-1.5.12.tar.gz',
            'OpenShadingLanguage-Release-1.5.12.tar.gz',
            '1.5.12',
            '484752a0f97df55962c3a667075deddc'
          ),
        ],
        depend=[llvm]
)

ocio = build.cmake(
        ARGUMENTS,
        'ocio',
        download=[
          (
            'https://github.com/imageworks/OpenColorIO/archive/v1.0.9.tar.gz',
            'OpenColorIO-1.0.9.tar.gz',
            '1.0.9',
            '06d0efe9cc1b32d7b14134779c9d1251'
          ),
        ],
        # ocio needs a newer GCC than 4.1.2 (which is the version we use in pipeVFX), unfortunatelly.
        # so we're forced to rely on the system gcc here,
        compiler = build.gcc.system,
#        environ={
#            'CC'  : '/usr/bin/gcc',
#            'CXX' : '/usr/bin/g++',
#            'LD'  : '/usr/bin/ld',
#        },
#        cmd = [
#            'cmake $SOURCE_FOLDER && '
#            'make -j $DCORES && make install'
#        ],
)
build.allDepend.append(ocio)
oiio = build.cmake(
        ARGUMENTS,
        'oiio',
        # oiio has some hard-coded path to find python, and the only
        # way to make it respect the PYTHON related environment variables,
        # is to patch some files to force it!
        sed = {
            '0.0.0' : {
                'src/python/CMakeLists.txt' : [
                    ('SET(.*PYTHON_INCLUDE_DIR','#SET( PYTHON_INCLUDE_DIR'),
                    ('unset.*PYTHON_INCLUDE','#unset( PYTHON_INCLUDE'),
                    ('unset.*PYTHON_LIBRARY','#unset( PYTHON_LIBRARY'),
                    ('/usr/include/python','${PYTHON_ROOT}/include/python'),
                ],
            },
        },
        download=[
          (
            'https://github.com/OpenImageIO/oiio/archive/Release-1.5.15.tar.gz',
            'oiio-Release-1.5.15.tar.gz',
            '1.5.15',
            '152e9422d521b4ea790b3af71ebca5ae'
          ),
        ],
        python=allPythonVersions,
        # oiio needs a newer GCC than 4.1.2 (which is the version we use in pipeVFX), unfortunatelly.
        # so we're forced to rely on the system gcc here,
        compiler = build.gcc.system,
#        environ={
#            'CC'  : '/usr/bin/gcc',
#            'CXX' : '/usr/bin/g++',
#            'LD'  : '/usr/bin/ld',
#        },
#        cmd = [
#            'cmake $SOURCE_FOLDER && '
#            'make -j $DCORES && make install'
#        ],
)
build.allDepend.append(oiio)


# qt packages
qt = build.configure(
        ARGUMENTS,
        'qt',
        download=[
          (
            'http://download.qt.io/archive/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz',
            'qt-everywhere-opensource-src-4.8.6.tar.gz',
            '4.8.6',
            '2edbe4d6c2eff33ef91732602f3518eb'
          ),
        ],
        cmd = [
            'LD=g++ ./configure  -opensource -shared --confirm-license  -no-webkit -silent',
            'make QMAKE_CFLAGS="$CFLAGS -pipe" -j $DCORES && make install',
        ]
)
build.allDepend.append(qt)
sip = build.pythonSetup(
        ARGUMENTS,
        'sip',
        download=[
          (
            'http://sourceforge.net/projects/pyqt/files/sip/sip-4.16.7/sip-4.16.7.tar.gz',
            'sip-4.16.7.tar.gz',
            '4.16.7',
            '32abc003980599d33ffd789734de4c36'
          ),
        ],
        python=allPythonVersions,
        src = 'configure.py',
        cmd = [
            'python configure.py install --prefix=$TARGET_FOLDER',
        ],
)
pyqt = build.pythonSetup(
        ARGUMENTS,
        'pyqt',
        download=[
          (
            'http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.3/PyQt-x11-gpl-4.11.3.tar.gz',
            'PyQt-x11-gpl-4.11.3.tar.gz',
            '4.11.3',
            '997c3e443165a89a559e0d96b061bf70'
          ),
        ],
        depend=[sip],
        python=allPythonVersions,
        src = 'configure.py',
        cmd = [
            'python configure.py install --prefix=$TARGET_FOLDER',
        ],
)
build.allDepend.append(pyqt)



appleseed = build.cmake(
        ARGUMENTS,
        'appleseed',
        download=[
          (
            'https://github.com/appleseedhq/appleseed/archive/1.1.0-beta.tar.gz',
            'appleseed-1.1.0-beta.tar.gz',
            '1.0.0b',
            'ad6eb4d6d58743a3192098bff9da15ab'
          ),
        ],
)



#https://github.com/ImageEngine/cortex/archive/9.0.0-b7.tar.gz
#https://github.com/ImageEngine/cortex/archive/8.5.4.tar.gz


