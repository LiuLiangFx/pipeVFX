#!/usr/bin/python2
# =================================================================================
#    This file is part of pipeVFX.
#
#    pipeVFX is a software system initally authored back in 2006 and currently
#    developed by Roberto Hradec - https://bitbucket.org/robertohradec/pipevfx
#
#    pipeVFX is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    pipeVFX is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with pipeVFX.  If not, see <http://www.gnu.org/licenses/>.
# =================================================================================

import sys, os
sys.path.insert( 0, os.path.abspath('../tools/python/') )

# build all pkgs, if not already built!
import build
print 'build.installRoot() =', build.installRoot()

# pkgs will have all scons builds as its parameters
# to use boost, just add pkgs.boost as a dependency
pkgs = build.pkgs.all(ARGUMENTS) # noqa

# cortex versions to build
boostVersion = "1.51.0"
download = [
    [
        'https://github.com/ImageEngine/cortex/archive/9.13.2.tar.gz',
        'cortex-9.13.2.tar.gz',
        '9.13.2',
        'a9f5ac8f19958a8d636d7706a5ca6be0',
        {pkgs.boost : boostVersion, pkgs.alembic : "1.5.8", pkgs.gcc : '4.1.2'}
    ]
]

# cortex dependency
depend = [
    pkgs.icu, pkgs.scons, pkgs.tbb,
    pkgs.freeglut, pkgs.freetype, pkgs.libpng, pkgs.hdf5,
    pkgs.tiff, pkgs.jpeg, pkgs.alembic, pkgs.openssl,
    pkgs.ilmbase, pkgs.openexr
]

# get installed app versions using pipe
import pipe
nuke    = pipe.apps.nuke()
maya    = pipe.apps.maya()
prman   = pipe.apps.prman()
houdini = pipe.apps.houdini()

# grab version lists
mv = build.pkgs.versionSort( maya.versionList() )
pv = build.pkgs.versionSort( prman.versionList() )
nv = build.pkgs.versionSort( nuke.versionList() )
hv = build.pkgs.versionSort( houdini.versionList() )

# disable arnold!
pipe.version.set(arnold='0.0.0')

cortex = {}
# build one version of IECore, IECorePython and IECoreGL libraries for each boost version
for bv in pkgs.boost.versions:
    if bv in ['1.51.0','1.55.0','1.56.0']:
        # build cortex core libraries only
        sufix = "core.boost.%s" % bv
        cortex[sufix] = build.cortex(
            ARGUMENTS, # noqa
            'cortex',
            targetSuffix = sufix,
            download = build.cortex.pkg(download, pkgs.boost, bv),
            baseLibs = [pkgs.python],
            depend = depend,
            sconsInstall = "installCore installGL"
        )

# now build IECoreAlembic for all versions of alembic
for v in pkgs.alembic.versions:
    sufix = "core.alembic.%s" % v
    cortex[sufix] = build.cortex(
        ARGUMENTS, # noqa
        'cortex',
        targetSuffix = sufix,
        download = build.cortex.pkg(download, pkgs.alembic, v),
        sed = build.cortex.noIECoreSED(),
        baseLibs = [pkgs.python],
        depend = depend,
        sconsInstall = "installAlembic"
    )

class cortexApps:
    ''' # this class stores data to build cortex for all the apps.'''
    name, versions, baseLibs, install, download = (0,1,2,3,4)
    def __init__(self, download):
        # disable alembic from now on...
        pkg = build.cortex.pkg
        noAlembic = pkg(download, pkgs.alembic, None)
        self.builds = [
            # IECoreRI needs to be build first since IECoreMaya depends on it!
            ('prman',   pv[:2], pkgs.python, 'installRI',   noAlembic),
            ('maya',    mv    , None,        'installMaya', noAlembic),
            ('nuke',    nv[:2], None,        'installNuke', noAlembic),
            # we remove gcc for houdini so it will use the system gcc!
            ('houdini', hv[:2], None,        'installHoudini installMantra', pkg(pkg(noAlembic, pkgs.gcc, '4.8.3'), pkgs.boost, '1.51.0') ),
        ]

        # use the data in buildList to build cortex for all apps
        for app in self.builds:
            for v in app[ self.versions ]:
                sufix = app[ self.name ] + v
                cortex[sufix] = build.cortex(
                    ARGUMENTS, # noqa
                    'cortex',
                    targetSuffix = sufix,
                    download = app[ self.download ],
                    sed = build.cortex.noIECoreSED(),
                    baseLibs = app[ self.baseLibs ],
                    depend = depend+[pkgs.python],
                    apps = ( app[ self.name ], v ),
                    sconsInstall = app[ self.install ],
                )
cortexApps(download)

# build gaffer
gaffer = {}
for prman in pv[:2]:
    sufix = 'prman.'+ prman
    gaffer = build.gaffer(
        ARGUMENTS, # noqa
        'gaffer',
        targetSuffix = "",
        download = [
            [
                'https://github.com/ImageEngine/gaffer/archive/0.28.3.0.tar.gz',
                'gaffer-0.28.3.0.tar.gz',
                '0.28.3.0',
                'd20bc719696857cc19b117e538c16cc8',
                {pkgs.boost : boostVersion, pkgs.alembic : "1.5.8", pkgs.gcc : '4.1.2'}
            ]
        ],
        baseLibs = [pkgs.python],
        depend =  depend + [ cortex['core.boost.%s' % boostVersion], pkgs.qt, pkgs.pyqt, pkgs.osl, pkgs.oiio, pkgs.ocio, pkgs.llvm ],
        apps = ( 'prman', prman ),
        sconsInstall = "install"
    )
