#!/usr/bin/python2
# =================================================================================
#    This file is part of pipeVFX.
#
#    pipeVFX is a software system initally authored back in 2006 and currently
#    developed by Roberto Hradec - https://bitbucket.org/robertohradec/pipevfx
#
#    pipeVFX is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    pipeVFX is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with pipeVFX.  If not, see <http://www.gnu.org/licenses/>.
# =================================================================================

import sys, os, traceback
sys.path.insert( 0, os.path.abspath('../tools/python/') )

gcc_version = ''.join(os.popen("gcc --version | head -1 | awk '{print $(NF)}' | awk -F'-' '{print $1}'").readlines())
os.environ['GCC_VERSION'] = 'gcc-%s' % gcc_version
# os.environ['GCC_VERSION'] = 'gcc-multi'

# build all pkgs, if not already built!
import build
print 'build.installRoot() = '+build.installRoot()
# pkgs will have all scons builds as its parameters
# ex: to use boost, just add pkgs.boost as a dependency
pkgs = build.pkgs.all(ARGUMENTS) # noqa

# get installed app versions using pipe
import pipe

# we need libraries for pipe to work, so if we don't have then yet,
# we cant build cortex now!
canBuildCortexNow = False
try:
    pipe.apps.maya()
    canBuildCortexNow = True
except:
    print '''

    It seems we don't have libraries built yet, so we can't build app dependent pkgs yet! (ex: cortex,alembic)
    Run scons install again after this build finishes to complete the build!

    '''
    traceback.print_exc()


if canBuildCortexNow:
    nuke    = pipe.apps.nuke()
    maya    = pipe.apps.maya()
    prman   = pipe.apps.prman()
    houdini = pipe.apps.houdini()

    # grab version lists
    mv = [ x for x in build.pkgs.versionSort( maya.versionList()  ) if float(x.split('.')[0])>=2016 ]
    pv = [ x for x in build.pkgs.versionSort( prman.versionList() ) if float(x.split('.')[0])>=21 ]
    nv = [ x for x in build.pkgs.versionSort( nuke.versionList()  ) if float(x.split('.')[0])>=9 ]
    hv = build.pkgs.versionSort( houdini.versionList() )[-2:]

    # disable arnold!
    #pipe.version.set(arnold='0.0.0')

    # ===========================================================================================
    # MAYA
    # ===========================================================================================
    pkgs.maya_sip = []
    pkgs.maya_pyqt = []
    pkgs.maya_usd = []
    pkgs.maya_alembic = []
    pkgs.maya_openvdb = []
    for n in range(len(mv)):
        version = 0
        if mv:
            version = mv[0] if len(mv)<=n else mv[n]
            pipe.version.set( maya  = version )

        # build sip/pyqt for maya version!
        # for maya 2018 we're building pyside using autodesk qt 5.6.1
        # so we don't need maya to build it!
        if float(version) > 2015 and float(version) < 2018:
            pkgs.maya_sip += [build.pythonSetup(
                ARGUMENTS,
                'sip',
                download=[(
                    'https://sourceforge.net/projects/pyqt/files/sip/sip-4.16.7/sip-4.16.7.tar.gz',
                    'sip-4.16.7.tar.gz',
                    '4.16.7.maya%s' % version,
                    '32abc003980599d33ffd789734de4c36',
                    { pkgs.gcc : '4.1.2' }
                )],
                src = 'configure.py',
                apps = [ (pipe.apps.maya, pipe.version.get('maya')) ],
                cmd = [
                    # 'export MAYA_LOCATION=$(/bin/python2 -c "import pipe;print pipe.roots.apps()")/maya/%s' % version,
                    'mayapy configure.py '
                    '-b $TARGET_FOLDER/bin '
                    '-d $TARGET_FOLDER/lib/python$PYTHON_VERSION_MAJOR/site-packages/ '
                    '-e $TARGET_FOLDER/include/python$PYTHON_VERSION_MAJOR/ '
                    '-v $TARGET_FOLDER/share/sip/ '
                    'CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ',
                    'make -j $DCORES && make -j $DCORES install',
                ],
            )]
            pkgs.maya_pyqt += [build.pythonSetup(
                ARGUMENTS,
                'pyqt',
                download=[(
                    'https://svwh.dl.sourceforge.net/project/pyqt/PyQt4/PyQt-4.11.4/PyQt-x11-gpl-4.11.4.tar.gz',
                    'PyQt-x11-gpl-4.11.4.tar.gz',
                    '4.11.4.maya%s' % version,
                    '2fe8265b2ae2fc593241c2c84d09d481',
                    {sip[-1]: '4.16.7.maya2016.5', pkgs.gcc : '4.1.2'},
                )],
                # baseLibs=[pkgs.python],
                depend=[sip[-1], pkgs.gcc],
                apps = [ (pipe.apps.maya, pipe.version.get('maya')) ],
                src = 'configure-ng.py',
                cmd = [
                    # 'python configure-ng.py --confirm-license --assume-shared --protected-is-public --designer-plugindir=$QT_TARGET_FOLDER/plugins/designer/ --sysroot=$TARGET_FOLDER CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"',
                    '''export PYTHON_VERSION_MAJOR=$(mayapy --version 2>&1 | awk '{split($2,a,"."); print a[1] "." a[2] }')'''
                    'export QTDIR=$MAYA_LOCATION',
                    'export QMAKESPEC=$MAYA_LOCATION/mkspecs/linux-g++-64',
                    'export INCDIR_QT=$MAYA_LOCATION/include',
                    'export LIBDIR_QT=$MAYA_LOCATION/lib',
                    'export PATH=$MAYA_LOCATION/bin:$PATH',
                    'mayapy configure.py --confirm-license --assume-shared --verbose --no-designer-plugin '
                    '-b $TARGET_FOLDER/bin '
                    '-d $TARGET_FOLDER/lib/python$PYTHON_VERSION_MAJOR/site-packages/ '
                    '-v $TARGET_FOLDER/share/sip/PyQt4 '
                    'CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" '
                    'LIBDIR_QT=$MAYA_LOCATION/lib INCDIR_QT=$MAYA_LOCATION/include MOC=$MAYA_LOCATION/bin/moc -w -g ',
                    'make -j $DCORES CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ',
                    'make -j $DCORES CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" install',
                ],
            )]

        # build plugins
        if version:
            pkgs.maya_usd += [build.make(
                ARGUMENTS,
                'usd',
                sed = {},
                targetSuffix = "maya%s" % str(version),
                download = pkgs.usd.download,
                depend = pkgs.usd.depend,
                cmd = [
                    pkgs.usd.cmd[0].replace( 'cmake', 'cmake -D PXR_BUILD_MAYA_PLUGIN=1' ),
                    'make -j $DCORES && make install',
                ],
                apps = [ (pipe.apps.maya, str(version)) ],
            )]
            pkgs.maya_alembic += [build.alembic(
                ARGUMENTS,
                'alembic',
                targetSuffix = "maya%s" % str(version),
                baseLibs = pkgs.alembic.baseLibs,
                download = pkgs.alembic.download,
                depend = pkgs.alembic.depend,
                cmd = pkgs.alembic.cmd,
                apps = [ (pipe.apps.maya, str(version)) ],
            )]

            pkgs.maya_openvdb += [build.make(
                ARGUMENTS,
                'openvdb',
                targetSuffix = "maya%s" % str(version),
                download = pkgs.openvdb.download,
                depend = pkgs.openvdb.depend,
                cmd = ['cd openvdb_maya']+pkgs.openvdb.cmd[1:],
                environ = {
                    'MAYA_VERSION' : str(version),
                    'MAYA_ROOT' : pipe.apps.maya().path(),
                },
            )]

    # ===========================================================================================
    # PRMAN
    # ===========================================================================================
    pkgs.prman_usd = []
    pkgs.prman_alembic = []
    for n in range(len(pv)):
        version = 0
        if pv:
            version = pv[0] if len(pv)<=n else pv[n]
            pipe.version.set( prman  = version )

        if version:
            pkgs.prman_usd += [build.cmake(
                ARGUMENTS,
                'usd',
                sed = {},
                targetSuffix = "prman%s" % str(version),
                download = pkgs.usd.download,
                depend = pkgs.usd.depend,
                cmd = [
                    pkgs.usd.cmd[0].replace('cmake', 'cmake -D PXR_BUILD_PRMAN_PLUGIN=1'),
                    'make -j $DCORES && make install',
                ],
                apps = [ (pipe.apps.prman, str(version)) ],
            )]
            pkgs.prman_alembic += [build.alembic(
                ARGUMENTS,
                'alembic',
                targetSuffix = "prman%s" % str(version),
                baseLibs = pkgs.alembic.baseLibs,
                download = pkgs.alembic.download,
                depend = pkgs.alembic.depend,
                cmd = pkgs.alembic.cmd,
                apps = [ (pipe.apps.prman, str(version)) ],
            )]


    # ===========================================================================================
    # CORTEX VFX
    # ===========================================================================================
    boostMasterVersion = "1.55.0"
    download = [[
        'https://github.com/ImageEngine/cortex/archive/9.18.0.tar.gz',
        'cortex-9.18.0.tar.gz',
        '9.18.0',
        'b3c55cc5e0e95668208713a01a145869',
        {pkgs.boost : "1.51.0", pkgs.alembic : "1.5.8", pkgs.gcc : '4.1.2'}
    ],[
        'https://github.com/ImageEngine/cortex/archive/10.0.0-a65.tar.gz',
        'cortex-10.0.0-a65.tar.gz',
        '10.0.0.a65',
        '6d74b28f18574c2358a2946d97ba0499',
        {pkgs.boost : boostMasterVersion, pkgs.alembic : "1.5.8", pkgs.gcc : '4.8.5'}
    ]]

    # cortex dependency
    depend = [
        pkgs.icu, pkgs.tbb,
        pkgs.freeglut, pkgs.freetype, pkgs.libpng, pkgs.hdf5,
        pkgs.tiff, pkgs.jpeg, pkgs.alembic, pkgs.openssl,
        pkgs.ilmbase, pkgs.openexr,
        pkgs.usd, pkgs.opensubdiv, pkgs.ptex, pkgs.openvdb
    ]

    # build cortex matrix
    cortex = {}

    # we use this to apply patches created when developing cortex
    devPatch = []
    patchFile = os.environ['HOME']+'/dev/cortex.git/patch'
    if os.path.exists( patchFile ):
        devPatch = [ ''.join(open(patchFile).readlines()) ]

    # build one version of IECore, IECorePython and IECoreGL libraries for each boost version
    for boost_version in pkgs.boost.versions:
        if boost_version in ['1.51.0','1.55.0']:
            # build cortex core libraries only
            sufix = "core.boost.%s" % boost_version
            cortex[sufix] = build.cortex(
                ARGUMENTS, # noqa
                'cortex',
                targetSuffix = sufix,
                download = build.cortex.pkg(download, pkgs.boost, boost_version),
                baseLibs = [pkgs.python],
                depend = depend,
                sconsInstall = "installCore installGL",
                patch = devPatch,
            )

    # now build IECoreAlembic for all versions of alembic
    for alembic_version in pkgs.alembic.versions:
        sufix = "core.alembic.%s" % alembic_version
        cortex[sufix] = build.cortex(
            ARGUMENTS, # noqa
            'cortex',
            targetSuffix = sufix,
            download = build.cortex.pkg(download, pkgs.alembic, alembic_version),
            sed = build.cortex.noIECoreSED(),
            baseLibs = [pkgs.python],
            depend = depend,
            sconsInstall = "installAlembic",
            patch = devPatch,
        )

    class cortexApps:
        ''' # this class construct data to build cortex for all the apps.'''
        name, versions, baseLibs, install, download = (0,1,2,3,4)
        def __init__(self, download):
            # disable alembic from now on...
            pkg = build.cortex.pkg
            # remove alembic dependency from per app cortex
            noAlembic = pkg(download, pkgs.alembic, None)
            # set the version of each pkg needed for each build.
            self.builds = [
                # IECoreRI needs to be build first since IECoreMaya depends on it!
                # we also need to build for all python versions
                ('prman',   pv, pkgs.python, 'installRI',   noAlembic),
                # for maya/nuke/houdini, we only need to build for the needed python version.
                ('maya',    mv, None,        'installMaya', noAlembic),
                ('nuke',    nv, None,        'installNuke', noAlembic),
                # houdini has specific needs regarding pkg versions.
                ('houdini', hv, None,        'installHoudini installMantra', pkg(pkg(pkg(noAlembic, pkgs.gcc, '4.8.3'), pkgs.boost, '1.55.0'), pkgs.tbb, None)),
            ]

            # use the data in buildList to build cortex for all apps
            for app in self.builds:
                for v in app[ self.versions ]:
                    # we use this to apply patches created when developing cortex
                    devPatch = []
                    # print app[ self.download ]
                    patchFile = os.environ['HOME']+'/dev/cortex.git/patch.$(basename $CORTEX_TARGET_FOLDER)'
                    if os.path.exists( patchFile ):
                        devPatch = [ ''.join(open(patchFile).readlines()) ]

                    sufix = app[ self.name ] + v
                    cortex[sufix] = build.cortex(
                        ARGUMENTS, # noqa
                        'cortex',
                        targetSuffix = sufix,
                        download = app[ self.download ],
                        sed = build.cortex.noIECoreSED(),
                        baseLibs = app[ self.baseLibs ],
                        depend = depend+[pkgs.python],
                        apps = ( app[ self.name ], v ),
                        sconsInstall = app[ self.install ],
                        patch = devPatch,
                    )
    cortexApps(download)

    # ===========================================================================================
    # GAFFER
    # ===========================================================================================
    pkgs.gaffer = {}
    # set first version to 0, so we build gaffer without any app support.
    gaffer_versions = ['0']
    # now, add prman versions to build gaffer against
    gaffer_versions += pv

    # so now we can build!
    for version in gaffer_versions:
        sufix = ''
        apps = []
        if float(version) > 0:
            sufix = 'prman.'+ version
            apps = ( 'prman', version )

        pkgs.gaffer[sufix] = build.gaffer(
            ARGUMENTS, # noqa
            'gaffer',
            targetSuffix = sufix,
            download = [[
                'https://github.com/GafferHQ/gaffer/archive/0.32.0.0.tar.gz',
                'gaffer-0.32.0.0.tar.gz',
                '0.32.0.0',
                '2ae5c942f79dff458abda6bfb4c081f2',
                {pkgs.boost : "1.51.0", pkgs.alembic : "1.5.8",
                pkgs.gcc : '4.1.2', cortex['core.boost.1.51.0'] : '9.18.0'}
            ],[
                'https://github.com/GafferHQ/gaffer/archive/0.53.6.3.tar.gz',
                'gaffer-0.53.6.3.tar.gz',
                '0.53.6.3',
                'dbbfd30eb280d7241969511a095a0c8f',
                {pkgs.boost : boostMasterVersion, pkgs.alembic : "1.7.11",
                pkgs.gcc : '4.8.5',  cortex['core.boost.%s' % boostMasterVersion] : '10.0.0.a65'}
            ]],
            baseLibs = [pkgs.python],
            depend =  depend + [
                pkgs.qt, pkgs.pyqt, pkgs.osl,
                pkgs.oiio, pkgs.ocio, pkgs.llvm
            ],
            apps = apps,
            sconsInstall = "install"
        )





#
