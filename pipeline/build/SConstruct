#!/usr/bin/python2

import sys, os
sys.path.insert( 0, os.path.abspath('../tools/python/') )

import pipe
nuke    = pipe.apps.nuke()
maya    = pipe.apps.maya()
prman   = pipe.apps.prman()
houdini = pipe.apps.houdini()

# grab version lists
mv = maya.versionList()
pv = prman.versionList()
nv = nuke.versionList()
hv = houdini.versionList()

# disable arnold!
pipe.version.set(arnold='0.0.0')

# build all pkgs, if not already built!
import build
print 'build.installRoot() =', build.installRoot()

# pkgs will have all scons builds as its parameters
# to use boost, just add pkgs.boost as a dependency
pkgs = build.pkgs.all(ARGUMENTS) # noqa


cortex = {}
for n in range(2):

    # we set the main pipeline python version to a bogus one, since
    # we want the build to use the build python versions instead!
    # this bogus python version prevent the app classes from assign
    # the default python include/lib searchpaths, specially when certain app
    # versions set they own python version
    # (like maya 2012 uses python 2.6 and 2014 uses 2.7)
    pipe.version.set(python='1.0.0')

    # now set the version of the apps
    # pipe.version.set({app:version})
    pipe.version.set( maya      = mv[0] if len(mv)<=n else mv[n] )
    pipe.version.set( prman     = pv[0] if len(pv)<=n else pv[n] )
    pipe.version.set( nuke      = nv[0] if len(nv)<=n else nv[n] )
    pipe.version.set( houdini   = hv[0] if len(hv)<=n else hv[n] )

    pipe.version.set( maya      = '1.0' )
    pipe.version.set( prman     = '1.0' )
    pipe.version.set( nuke      = '1.0' )


    sufix = "maya%sprman%snuke%shoudini%s" % (
        pipe.version.get('maya'),
        pipe.version.get('prman'),
        pipe.version.get('nuke'),
        pipe.version.get('houdini'),
    )

    # and build cortex for those versions!
    cortex[sufix] = build.cortex(
        ARGUMENTS, # noqa
        'cortex',
        targetSuffix = sufix,
        download = [(
            'https://github.com/ImageEngine/cortex/archive/9.11.3.tar.gz',
            'cortex-9.11.3.tar.gz',
            '9.11.3',
            '07d7b364984ddfda7bfc75333e55b19e',
            {pkgs.boost : "1.58.0", pkgs.alembic : "1.5.8"}
        # ),(
        #     'https://github.com/ImageEngine/cortex/archive/9.11.4.tar.gz',
        #     'cortex-9.11.4.tar.gz',
        #     '9.11.4',
        #     '07d7b364984ddfda7bfc75333e55b19e',
        #     {pkgs.boost : "1.58.0", pkgs.alembic : "1.5.8"}
        )],
        sed = { "0.0.0" : {
            'src/IECoreRI/RendererImplementation.cpp' : [
                ('RiProceduralV( data, riBound, procSubdivide, procFree, 1, tokens, values );','''
                    // prman 20.2 doesn't have RiProceduralV, only RiProcedural2V. So for now, just revert to RiProcedural as workaroud
                    #ifdef RiProceduralV
                                    RiProceduralV( data, riBound, procSubdivide, procFree, 1, tokens, values );
                    #else
                                    RiProcedural( data, riBound, procSubdivide, procFree );
                    #endif'''
                ),('// RiProcDelayedReadArchive','''
                    // prman 20.2 doesn't have RiProcFree anymore, so just use c++ free in its place
                    #ifndef RiProcFree
                                    #define RiProcFree free
                    #endif
                    // RiProcDelayedReadArchive'''
                ),
            ],
            'SConstruct' : [
                ('houdiniEnv.Prepend( SHLINKFLAGS = "$HOUDINI_LINK_FLAGS" )', 'houdiniEnv.Prepend( SHLINKFLAGS = ["$HOUDINI_LINK_FLAGS"] )'),
                ('CPPFLAGS = "-DIECOREALEMBIC_WITH_OGAWA"', 'CPPFLAGS = ["-DIECOREALEMBIC_WITH_OGAWA"]'),
                ('testEnv.Prepend( CXXFLAGS = " ".join( dependencyIncludes ) )', 'testEnv.Prepend( CXXFLAGS = dependencyIncludes )'),
            ],
        }},
        baseLibs = [pkgs.python],
        depend = [
            pkgs.scons, pkgs.tbb, pkgs.boost, pkgs.hdf5,
            pkgs.freeglut, pkgs.freetype, pkgs.libpng,
            pkgs.tiff, pkgs.jpeg, pkgs.alembic, pkgs.openssl
        ],
        apps = [
            (pipe.apps.maya      , pipe.version.get('maya')),
            (pipe.apps.prman     , pipe.version.get('prman')),
            (pipe.apps.nuke      , pipe.version.get('nuke')),
            (pipe.apps.houdini   , pipe.version.get('houdini')),
        ],
    )
