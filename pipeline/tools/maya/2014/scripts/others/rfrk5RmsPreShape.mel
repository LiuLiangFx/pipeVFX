proc rfrk5RmsExportDisplacement(string $shader)
{
	if(`getAttr ($shader + ".mute")`)
		return;
		
	int $frame = rfrk5RmsGetCurrentTime();
	$cmd = "RiDisplacement rfrk5_displacement";

	int $numSeq = `getAttr -s ($shader + ".displaceSeq")`;
	int $realNumSeq = 0;
	for($i = 0; $i < $numSeq; ++$i)
	{
		string $attrPrefix = $shader + ".displaceSeq[" + $i + "].";
		if(`getAttr ($attrPrefix + "muteSeq")`)
			continue;
			
		string $texNode = rfrk5GetUpstreamNode($attrPrefix + "colorDisplace");
		if( ($texNode == "") || (`nodeType $texNode` != "file") )
			continue;

		string $fileName = rfrk5RmsAdjustFileName($texNode + ".fileTextureName", "", $frame, 4);
		if($fileName == "")
			continue;
			
		float $tiling[] = `getAttr -t $frame ($texNode + ".repeatUV")`; 
			
		$cmd += " \"string filename_" + $realNumSeq + "\" \"" + $fileName + "\"";
		$cmd += " \"float intensity_" + $realNumSeq + "\" " + `getAttr -t $frame ($attrPrefix + "intensity")`;
		$cmd += " \"float s_repeat_" + $realNumSeq + "\" " + $tiling[0];
		$cmd += " \"float t_repeat_" + $realNumSeq + "\" " + $tiling[1];
		$cmd += " \"int mute_" + $realNumSeq + "\" 0";
		
		++$realNumSeq;
	}
	
	if($realNumSeq > 0)
		eval $cmd;
}

global proc rfrk5RmsPreShape()
{
	string $shapeNode = `rman ctxGetObject`;
	$shaderAndSG = rfrk5GetShaderAndSG($shapeNode);
	string $shaderNode = $shaderAndSG[0];
	string $shadingGroup = $shaderAndSG[1];
	
	if($shaderNode == "")
		return;
	
	// Check if displacement is applied.
	if($shadingGroup != "")
	{
		string $dispShader = rfrk5GetUpstreamNode($shadingGroup + ".miDisplacementShader");
		if($dispShader == "")
			$dispShader = rfrk5GetUpstreamNode($shadingGroup + ".displacementShader");
			
		if( ($dispShader != "") && (`nodeType $dispShader` == "rfrk_displacement5") )
			rfrk5RmsExportDisplacement($dispShader);
	}
	
	string $args = rfrk5BuildParamStr($shaderNode, $shapeNode, "rms");
	if($args == "")
		return;
		
	float $bbox[6] = { -100000, -100000, -100000, 100000, 100000, 100000 };

	float $dice = -1;

	string $nodeType = `nodeType $shaderNode`;
	if($nodeType == "rfrk_cloud5")
	{
		$bbox = rfrk5GetCloudBbox($shapeNode);
		float $dice = `getAttr ($shaderNode + ".radius")` * 0.1;
	}
	else if($nodeType == "rfrk_particler5")
	{
		if( `attributeQuery -node $shaderNode -exists "rfrkRmsRenderType"` && (`getAttr ($shaderNode + ".rfrkRmsRenderType")` == 3) )
		{
			float $minRadius = 1000;
			int $numSeq = `getAttr -s ($shaderNode + ".files")`;
            for($i = 0; $i < $numSeq; ++$i)	 
            {	 
				string $attrName = $shaderNode + ".files[" + $i + "].radius";
                float $radius = `getAttr $attrName`;	 
                $minRadius = min($minRadius, $radius);	 
            }
			$dice = $minRadius * 0.1;
		}
	}
	
	int $procType = `attributeQuery -node $shaderNode -exists "rfrkRmsProceduralType"` ? `getAttr ($shaderNode + ".rfrkRmsProceduralType")` : 1;
		
	string $procTypeName;
	string $procFile;
	if($procType == 0)
	{
		$procTypeName = "RunProgram";
		$procFile = "rfrk5_runprogram";
		if(`about -windows`)
			$procFile += ".exe";
	}
	else
	{
		$procTypeName = "DynamicLoad";
		$procFile = "rfrk5_dynamicload";
		if(`about -windows`)
			$procFile += ".dll";
		else if(`about -linux`)
			$procFile = "lib" + $procFile + ".so";
	}
	
	if($dice >= 0)
		RiAttribute "dice" "float minlength" $dice "string minlengthspace" "world";

	RiProcedural $procTypeName $procFile $bbox[0] $bbox[3] $bbox[1] $bbox[4] $bbox[2] $bbox[5] $args;
}
