3dl
############################################################################
# File automatically generated by the 3delight shader compiler.            #
# DO NOT EDIT THIS FILE !!!                                                #
############################################################################

# Compiled with 3Delight 10.0.148 linux64 (Jun 17 2013, 3e8a59) "Blade Runner"

%code 7 121
0

1
1
1
1
1
0
1
0
0
1
1
0
0
1
1
1
1
0
1
1
0
0
0
0
0
0
0
0
30
0 12 0
0 1 0.00000000e+00
0 1 1.00000000e+00
0 1 2.00000000e+00
0 4 ""
0 4 "type"
0 4 "user:ShadowMapRendering"
0 4 "photon:shadingmodel"
0 4 "transmission"
0 4 "user:maya_bakepass"
0 4 "diffuse"
0 1 5.00000000e-01
0 4 "maya_gi_shader"
0 4 "effect"
0 4 "Sides"
0 4 "geometry:geometricnormal"
0 4 "Ri:Orientation"
0 4 "outside"
0 4 "__nondiffuse"
0 1 1.00000002e+30
0 4 "light"
0 4 "matte"
0 1 8.00000012e-01
0 4 "bakelight"
0 4 "send:light:do_bake"
0 13 0
0 4 "ComputeGI"
0 4 "lambert1"
0 1 1.57079637e+00
0 10 1
1
"shaderid" "" 2 1 0 0 0 0
0
0
0
0
0
0
0
0


3

1 58 29 

1
3 

0
0

0

0

0

0

2
"surface"
"*opacity"
14
2
3
13
14
6
9
10
4
16
18
19
0
15
1
2
"*Ci" 3 3 0 0 1 0
"*Oi" 3 3 0 0 1 0
0
0

0


0

0


0

15
10 0 0 0
4 0 0 0
4 0 0 0
4 0 0 0
4 0 0 0
13 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
16
10 0 0 0
1 0 0 0
1 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
9 0 0 0
9 0 0 0
9 0 0 0
8 0 0 0
608

4 70 30 
7 60 32 
203 65 33 60 
43 74 65 29 
232 74 0 3 
7 60 32 
234 
1 66 29 
200 65 34 66 
43 74 65 29 
232 74 0 3 
1 66 29 
234 
45 74 60 36 
232 74 1 4 
43 74 66 30 
234 
232 74 0 3 
1 66 30 
233 3 
1 66 29 
234 
1 67 29 
201 65 37 67 
43 74 65 29 
232 74 0 3 
1 67 29 
234 
45 74 60 38 
232 74 1 4 
44 74 67 29 
234 
232 74 0 3 
1 65 30 
233 3 
1 65 29 
234 
44 74 66 29 
232 74 1 4 
43 74 65 29 
234 
232 74 0 3 
1 66 30 
233 3 
1 66 29 
234 
9 71 29 29 29 
9 72 39 39 39 
9 73 29 29 29 
1 65 39 
26 77 72 0 
25 78 77 50 
203 67 33 61 
43 74 30 67 
232 74 0 4 
45 74 61 48 
234 
232 74 0 30 
200 67 35 62 
43 74 30 67 
232 74 0 4 
45 74 62 49 
234 
232 74 0 3 
2 77 78 
234 
9 78 29 29 29 
233 357 
135 86 15 1 
2 88 86 
1 67 31 
200 68 42 67 
43 74 67 31 
232 74 0 4 
139 88 86 4 
233 32 
1 67 30 
200 69 43 67 
43 74 67 29 
232 74 0 16 
200 67 44 63 
45 74 63 45 
232 74 0 3 
40 88 88 
234 
234 
234 
2 87 88 
156 80 
2 79 80 
4 81 29 
1 67 56 
178 59 6 28 0 0 
235 59 62 
177 74 6 88 67 28 
232 74 0 43 
1 75 29 
206 69 46 75 
41 74 75 30 
232 74 0 27 
2 82 19 
135 89 18 1 
37 76 89 88 
25 80 82 76 
20 75 30 75 
25 80 80 75 
19 81 81 80 
234 
234 
179 59 6 28 0 0 
236 -65 
4 82 29 
21 78 30 70 
21 80 30 78 
26 77 77 80 
4 70 47 
78 77 77 71 70 
25 80 81 50 
48 74 78 71 
232 74 0 4 
44 74 66 29 
234 
232 74 0 72 
203 67 33 63 
43 74 30 67 
232 74 0 4 
45 74 63 36 
234 
232 74 1 17 
200 67 34 69 
43 74 30 67 
232 74 0 4 
44 74 69 29 
234 
234 
232 74 0 23 
4 83 29 
135 88 4 1 
37 75 88 86 
73 75 75 
151 75 30 75 65 
25 78 78 75 
233 3 
4 83 29 
234 
233 3 
4 83 29 
234 
4 70 50 
26 81 77 70 
232 57 0 49 
211 64 40 
56 74 64 53 
232 74 0 32 
1 67 29 
213 69 64 41 67 
44 74 67 29 
232 74 0 15 
228 3 64 54 55 85 6 87 81 
2 84 85 
237 3 28 
234 
234 
9 84 29 29 29 
234 
26 81 70 84 
19 80 79 80 
19 80 80 81 
19 79 80 82 
26 77 77 79 
19 79 77 73 
19 77 79 83 
234 
21 79 30 78 
26 3 1 79 
26 2 77 1 
178 59 6 51 1 30 0 52 
235 59 10 
179 59 6 51 1 30 0 52 
236 -13 

180
3 6 10 14 18 21 22 25 29 33 37 40 41 45 49 53 54 58 61 63 
66 67 70 74 78 82 85 86 90 94 98 99 103 106 108 111 112 116 120 124 
125 129 132 134 137 138 143 148 153 156 160 164 168 172 176 180 181 185 189 193 
197 201 202 206 209 210 215 217 221 224 227 231 235 239 243 245 248 252 256 260 
264 268 272 275 276 277 278 281 283 286 289 292 298 301 307 311 314 318 322 326 
329 333 337 341 345 349 353 354 355 361 363 366 370 374 378 381 386 390 394 398 
402 403 407 411 415 419 423 424 428 432 436 440 444 445 446 450 453 457 461 464 
469 473 475 478 479 481 484 485 488 492 496 499 503 507 510 515 519 523 532 535 
538 539 540 545 546 550 554 558 562 566 570 574 575 579 583 587 595 598 606 608 
9
0
15
16
4
6
18
19
3
1
1
"*Oi" 3 3 0 0 1 0
0
0

0


0

12
4 0 0 0
4 0 0 0
4 0 0 0
13 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
9
10 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
3 0 0 0
9 0 0 0
9 0 0 0
9 0 0 0
1 0 0 0
446

4 99 30 
7 90 32 
203 94 33 90 
43 102 94 29 
232 102 0 3 
7 90 32 
234 
1 95 29 
200 94 34 95 
43 102 94 29 
232 102 0 3 
1 95 29 
234 
45 102 90 36 
232 102 1 4 
43 102 95 30 
234 
232 102 0 3 
1 95 30 
233 3 
1 95 29 
234 
1 96 29 
201 94 37 96 
43 102 94 29 
232 102 0 3 
1 96 29 
234 
45 102 90 38 
232 102 1 4 
44 102 96 29 
234 
232 102 0 3 
1 94 30 
233 3 
1 94 29 
234 
44 102 95 29 
232 102 1 4 
43 102 94 29 
234 
232 102 0 3 
1 95 30 
233 3 
1 95 29 
234 
9 100 29 29 29 
9 101 39 39 39 
1 94 39 
26 103 101 0 
203 96 33 91 
43 102 30 96 
232 102 0 4 
45 102 91 48 
234 
232 102 0 5 
9 104 29 29 29 
233 254 
135 107 15 1 
2 109 107 
1 96 31 
200 97 42 96 
43 102 96 31 
232 102 0 4 
139 109 107 4 
233 32 
1 96 30 
200 98 43 96 
43 102 96 29 
232 102 0 16 
200 96 44 92 
45 102 92 45 
232 102 0 3 
40 109 109 
234 
234 
234 
2 108 109 
1 96 56 
178 102 6 28 0 0 
235 102 23 
177 102 6 109 96 28 
232 102 0 4 
206 98 46 110 
234 
179 102 6 28 0 0 
236 -26 
21 104 30 99 
21 105 30 104 
26 103 103 105 
4 99 47 
78 103 103 100 99 
48 102 104 100 
232 102 0 4 
44 102 95 29 
234 
232 102 0 64 
203 96 33 92 
43 102 30 96 
232 102 0 4 
45 102 92 36 
234 
232 102 1 17 
200 96 34 98 
43 102 30 96 
232 102 0 4 
44 102 98 29 
234 
234 
232 102 0 20 
135 109 4 1 
37 110 109 107 
73 110 110 
151 110 30 110 94 
25 104 104 110 
234 
234 
4 99 50 
26 103 103 99 
232 57 0 41 
211 93 40 
56 102 93 53 
232 102 0 29 
1 96 29 
213 98 93 41 96 
44 102 96 29 
232 102 0 12 
228 3 93 54 55 106 6 108 103 
237 3 28 
234 
234 
234 
234 
21 103 30 104 
26 3 1 103 

135
3 6 10 14 18 21 22 25 29 33 37 40 41 45 49 53 54 58 61 63 
66 67 70 74 78 82 85 86 90 94 98 99 103 106 108 111 112 116 120 124 
125 129 132 134 137 138 143 148 151 155 159 163 167 171 172 176 181 183 187 190 
193 197 201 205 209 211 214 218 222 226 230 234 238 241 242 243 244 247 250 256 
259 265 269 273 274 280 282 286 290 294 297 302 306 310 314 315 319 323 327 331 
335 336 340 344 348 352 356 357 358 362 366 370 373 378 382 383 384 387 391 395 
398 402 406 409 414 418 422 431 434 435 436 437 438 442 446 

%comment-3dl 7 121
7
"MacroBlocks_*opacity"
"MTIKMTQgMwogMSAxIDAKIDk1IDEwMgoyOSAzCiAxIDEgMAogOTYgMTAyCjM3IDQKIDIgMCAxCiA5NCA5NSAxMDIKNDYgNAogMSAwIDMKIDAgOTQgMTAwIDEwMwo1OCAzCiAxIDAgMwogMTUgOTYgMTA3IDEwOQo3MiAzCiAxIDEgMAogMTAyIDEwOQo3NyAyCiAxIDAgMgogMTA5IDk2IDEwOAo4NyA5CiAzIDEgMgogOTUgOTkgMTAwIDEwMyAxMDIgMTA0CjEwNCA0CiAyIDAgMQogOTYgOTggMTAyCjEwOSA3CiA0IDEgMAogOTQgMTAyIDEwNyA0IDEwNAoxMTcgMgogMCAxIDAKIDEwMwoxMzMgMgogMiAwIDEKIDEwNCAxIDM="
"MacroBlocks_surface"
"MTUKMTQgMwogMSAxIDAKIDY2IDc0CjI5IDMKIDEgMSAwCiA2NyA3NAozNyA0CiAyIDAgMQogNjUgNjYgNzQKNDYgNgogMSAwIDUKIDAgNjUgNzEgNzMgNzcgNzgKNjMgNAogMSAyIDAKIDc0IDc3IDc4CjY4IDMKIDEgMCAzCiAxNSA2NyA4NiA4OAo4MiAzCiAxIDEgMAogNzQgODgKODkgMwogMSAwIDMKIDgwIDY3IDc5IDgxCjk4IDEwCiA0IDEgMAogNzUgODggMTggMTkgODEKMTExIDExCiA0IDEgNAogNjYgNzAgNzEgODEgNzcgNzQgNzggODAgODIKMTMwIDQKIDIgMCAxCiA2NyA2OSA3NAoxMzUgMTAKIDQgMSAxCiA2NSA3NCA4NiA0IDc4IDgzCjE0OCAyCiAxIDAgMgogNzcgNzAgODEKMTY1IDcKIDcgMSAwCiA3MCA3MyA3OSA4MCA4MiA4MyA4NCA3NwoxNzMgMwogMyAwIDIKIDc3IDc4IDEgMiAz"
"OpCodesForDerivatives_*opacity"
"MAo="
"OpCodesForDerivatives_surface"
"MAo="
"ScopeBlocks_*opacity"
"NwoxNCAyCiAxIDEgMAogOTUgMTAyCjI5IDIKIDEgMSAwCiA5NiAxMDIKMzggMgogMSAxIDAKIDk0IDEwMgo3MiAyCiAwIDEgMAogMTA5CjkzIDIKIDEgMSAwCiA5NSAxMDIKMTA1IDIKIDEgMSAwCiA5OCAxMDIKMTA5IDYKIDMgMSAwCiA5NCAxMDcgNCAxMDQ="
"ScopeBlocks_surface"
"MTAKMTQgMgogMSAxIDAKIDY2IDc0CjI5IDIKIDEgMSAwCiA2NyA3NAozOCAyCiAxIDEgMAogNjUgNzQKNjMgMgogMSAxIDAKIDc4IDc3CjgyIDIKIDAgMSAwCiA4OAo5OSA4CiA0IDEgMAogNzUgODggMTggMTkgODEKMTE5IDIKIDEgMSAwCiA2NiA3NAoxMzEgMgogMSAxIDAKIDY5IDc0CjEzNSA3CiAzIDEgMQogNjUgODYgNCA3OCA4MwoxNDIgMgogMCAwIDEKIDgz"
"source"
""
%comment-user 7 121
0

