#!/usr/bin/python



import sys,os,time,pipe,shutil,glob

rsync = "sudo rsync -avWpP"
rsync_exclude = "--exclude '%s'"




RESTORE='\033[0m'
RED='\033[00;31m'
GREEN='\033[00;32m'


if len(sys.argv)<2:
    distroName = os.popen('''cat /etc/*-release | head -1 | sed 's/"//g' ''').readlines()[0].strip().split('=')[-1]
    image = distroName.replace(' ','_').replace('/','').replace('(','').replace(')','')
    image = image + "_%s_%s" % ('_'.join(time.ctime().split()[1:3]), time.ctime().split()[-1])
    image = image.lower()
    image = image.replace('gnulinux_','')
else:
    image=sys.argv[1]



print "==================================================================="
print "creating a new distro snapshot at %s ..." % image
print "==================================================================="

exclude = [
    '/__envs',
    '/lost+found',
    '/media',
    '/mnt',
    '/tmp',
    '/var/tmp',
    '/usr/tmp',
    '/var/log',
]

for each in os.popen("mount").readlines():
    mount = each.split()[2]
    if mount != '/':
        if not filter(lambda x: x in mount, exclude):
            exclude.append(mount)
            
cmd = [rsync]
for each in exclude:
    cmd.append( rsync_exclude % each )
    

target='/%s/netboot/distros/%s/' % (pipe.studio(),image)
cmd.append('/*')
cmd.append(target)

print "%-59s" % "setting up excluded directories",
sys.stdout.flush()
for p in exclude:
    f=''
    for each in p.split('/'):
        if each:
            f += "/%s" % each
            each = f
            if os.path.isdir(each):
                path = "%s%s" % (target[:-1],each)
#                print "copy attrs from %s to %s" % (each,path)
#                print "getfacl %s > filename" % each
#                print "sudo setfacl -M filename -m %s " % path
                os.popen("sudo mkdir -p %s" % path).readlines()
                os.popen("getfacl %s 2>/dev/null | grep -v '#'  > /tmp/filename" % each).readlines()
                os.popen("sudo setfacl -M /tmp/filename %s " % path).readlines()
                os.popen("rm -rf filename").readlines()

print GREEN+"[  OK  ]"+RESTORE
sys.stdout.flush()

print "%-59s" % "apt-get cleanup",
sys.stdout.flush()
os.popen("sudo apt-get clean")
print GREEN+"[  OK  ]"+RESTORE
sys.stdout.flush()

print "%-59s" % "copying files",
sys.stdout.flush()
#print ' '.join(cmd)
os.popen(' '.join(cmd)).readlines()
print GREEN+"[  OK  ]"+RESTORE
sys.stdout.flush()


#print "%-59s" % "fixing kernel source path",
#sys.stdout.flush()
##print "%s/lib/modules/*/source" % target
#for folders in ['source','build','__source','__build']:
#    for each in glob.glob("%s/lib/modules/*/%s" % (target, folders)):
#        real = os.path.realpath( each )
#        if os.path.basename(each)[0:2] == '__':
#            os.system( 'sudo rm -rf %s' % each )
#        elif os.path.basename(each) == 'build':
#            os.system( "ln -s source %s" % each )
#        elif '/usr/' not in real:
#            os.system('''
#                sudo make distclean -C %s
#                sudo rm -rf %s
#                sudo rsync -avWpP %s/* %s/
#            ''' % (real, each, real, each))

#print GREEN+"[  OK  ]"+RESTORE
#sys.stdout.flush()



