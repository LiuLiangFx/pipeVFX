#!/bin/bash
#
# Sets up a readonly root filesystem to be used as a normal
# writable root filesystem! 
#
# We need to add this to the top of /etc/rc.sysinit
# so it runs before the whole fedora initialization!!!
#
#

version=0.8.6

clear 
getarg(){
    for each in $(echo $(cat /proc/cmdline)) ; do 
        [ "$(echo $each | cut -d'=' -f1)" == "$1" ] && echo $(echo $each | cut -d'=' -f2)
    done
}

cache(){
  for line in $(cat /proc/partitions | grep sd.. | cut -d's' -f2 | sed 's/d/sd/g'); do
	echo "$(/sbin/blkid /dev/$line | grep CACHE | cut -d':' -f1)"
	/sbin/blkid /dev/$line >&2
	echo $line >&2
  done
}
mountCache(){
    cacheVol=$(cache)
    cat /proc/partitions >&2
    echo $cacheVol >&2
    if [ "$cacheVol" != "" ] ; then 
        mkdir -p /boot/cache
        mount $cacheVol /boot/cache
        chmod a+rwx /boot/cache
    fi
}

lsmod

#/bin/sh
root=$(getarg root)
if [ "$root" == "" ] ; then 
   root="192.168.0.11:/RAID/atomo"
fi
pipe=$(getarg pipe)
distro=$(getarg distro)
studio=$(getarg studio)
fallback=$(getarg fallback)
liveInit=$(getarg liveInit)
nfsRoot="$pipe/$distro"
nfsRoot2="$root/$distro"
nfsOpts="vers=3,rsize=32768,wsize=32768,timeo=1200,acl,retry=5,intr,tcp,noatime,nodiratime,fsc"


echo "=============================================================="
echo Pipe Boot script version $version
echo ""
echo "Pipe....: $pipe"
echo "Distro..: $distro"
echo "liveInit: $liveInit"

ulimit -n 131072

#/sbin/modprobe squashfs
#/sbin/modprobe fuse

# create folders to hold read-only and read-write filesystems. 
mkdir -p /boot
mount -t tmpfs -o size=16G tmpfs  /boot
mkdir -p /boot/rootRO
mkdir -p /boot/rootRW
mkdir -p /boot/rootRW/$studio
mkdir -p /boot/rootRW/3DSERVER/
mkdir -p /boot/rootRW/3dserver/
ln -s /mnt/Projetos /boot/rootRW/3DSERVER/
ln -s /mnt/Projetos /boot/rootRW/3dserver/

mount -r -o ro,nolock,$nfsOpts $nfsRoot2 /boot/rootRO
#mount -r -o ro,nolock,$nfsOpts $nfsRoot /boot/rootRO
mount -t tmpfs -o size=16G  tmpfs  /boot/rootRW


# mount writable folders for booting
busybox mount -o dirs=/boot/rootRW=rw:/boot/rootRO=ro -t aufs none /newroot
mkdir -p /newroot/boot/rootRW
mount --bind /boot/rootRW  /newroot/boot/rootRW
mkdir -p /newroot/boot/rootRO
mount --bind /boot/rootRO  /newroot/boot/rootRO
mkdir -p /newroot/boot/$studio
mkdir -p /newroot/boot/fallback


# setup sssd log folder, or else sssd won't start!!
mkdir -p /newroot/var/log/sssd
mkdir -p /newroot/tmp
mkdir -p /newroot/var/tmp
mount -t tmpfs -o size=16G  tmpfs  /newroot/tmp/
mount -t tmpfs -o size=16G  tmpfs  /newroot/var/tmp/
chmod a+rwx /newroot/tmp
chmod a+rwx /newroot/var/tmp

# if fedora:
if [ -f /newroot/etc/rc.d/rc.local ] ; then
    fedora=1
fi

# setup disk environment
setupDiskEnvironment(){
    devshm=/run/shm
    # if fedora, fix path shared memory path
    if [ -f /newroot/etc/rc.d/rc.local ] ; then
        devshm=/dev/shm
    fi

    cat > /newroot/etc/fstab <<EOF
proc                    /proc                   proc    defaults        0 0
tmpfs                   $devshm                 tmpfs   defaults,size=16G         0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
$pipe                   /$studio                nfs     $nfsOpts
$pipe                   /boot/$studio           nfs     $nfsOpts
none			/$studio/jobs		aufs	dirs=/boot/$studio/servers=rw:/boot/$studio/jobs=ro 
$root/home              /$studio/home           nfs     $nfsOpts
$root/pipeline          /$studio/pipeline       nfs     $nfsOpts
EOF
    rm -rf    /newroot/etc/mtab
    echo "" > /newroot/etc/mtab

}
setupDiskEnvironment

# setup network environment
setupNetwork(){
    cat > /newroot/etc/resolv.conf <<EOF
domain $studio.local
search $studio.local local
nameserver 192.168.0.10
nameserver 192.168.0.1
nameserver 208.67.222.222
nameserver 208.67.220.220
EOF

    rm -rf /newroot/etc/sysconfig/network-scripts/ifcfg-eth*
    rm -rf /newroot/etc/rc?.d/*NetworkManager*
    rm -rf /newroot/etc/rc?.d/*ware*
    rm -rf /newroot/etc/rc?.d/*kdump*
    rm -rf /newroot/etc/rc?.d/*sendmail*

    cat >  /newroot/etc/networks <<EOF
default 0.0.0.0
loopback 127.0.0.0
link-local 169.254.0.0

iface eth0 inet manual
iface eth1 inet manual
iface eth2 inet manual
EOF

    mac=$(echo $(ifconfig | grep -B2 192.168 | grep HWadd) | cut -d' ' -f5)
    cat >  /newroot/etc/NetworkManager/NetworkManager.conf  <<EOF
[main]
plugins=ifcfg-rh,keyfile

[ifupdown]
managed=false


[keyfile]
unmanaged-devices=mac:$mac
EOF
}
setupNetwork

# setup dbus environment
setupDbus(){
    # fix dbus service paths!
    sed -i -e 's/<fork\/>/<fork\/>\n\n  <servicedir>\/usr\/share\/dbus-1\/system-services<\/servicedir>\n/g' /newroot/etc/dbus-1/system.conf  

    #fix dbus for the current boot - remove previous machine-id, if any!
    rm -rf /newroot/var/lib/dbus/machine-id
}
setupDbus


#fix reboot
fixReboot(){
    halt=/newroot/etc/init.d/halt
    reboot=/newroot/etc/init.d/halt
    # if fedora, fix path for halt script
    if [ -f /newroot/etc/rc.d/rc.local ] ; then
        halt=/newroot/etc/rc.d/init.d/halt
        reboot=/newroot/etc/rc.d/init.d/reboot
        cat > $halt << EOF
#! /bin/sh
mount -t proc proc /proc
echo 1 > /proc/sys/kernel/sysrq
echo b > /proc/sysrq-trigger
EOF
        cp  $halt $reboot
    fi
}
fixReboot


# add pipeline rc.local to /etc/rc.local
pipeSetup(){
    chmod a+rw  /newroot/tmp
    mkdir -p    /newroot/var/tmp
    chmod a+rw  /newroot/var/tmp    

    # use the proper rc.local on debian and fedora!
    export rclocal=/etc/rc.local
    # if fedora:
    if [ -f /newroot/etc/rc.d/rc.local ] ; then
        rclocal=/etc/rc.d/rc.local
        fedora=1
    fi

    # if not fedora, fix gdm
    if [ "$fedora" == "" ] ; then
        ln -s /etc/gdm3 /newroot/etc/gdm 
        # disable GDM, so we can start it AFTER pipe rc.local!
        for each in $(ls /newroot/etc/rc?.d/S*gdm*)
        do
            rm -rf $each
        done
    fi
    
    # blacklist nouveau, as we want to use nvidia drivers, if we have nvidia hardware
    cat > /newroot/etc/blacklist-nouveau.conf <<EOF
# pipeVFX blacklist for nouveau driver - you need to run as root:
# dracut -f /boot/initramfs-$(uname -r).img $(uname -r)
# if nouveau is loaded despite this file.
blacklist nouveau
EOF


    # hook pipe init script into bash init for all users
    if [ -f /newroot/etc/bash.bashrc ] ; then
        echo " " >> /newroot/etc/bash.bashrc
        echo "# pipeline init script" >> /newroot/etc/bash.bashrc
        echo "[ -f /atomo/pipeline/tools/init/bash ] && source /atomo/pipeline/tools/init/bash" >> /newroot/etc/bash.bashrc
    fi

    # copy the up2date rc.local from the pipeline template 
    rm -rf /newroot/mountRootAsUnionFS.sh
    liveInit=$(getarg liveInit)
    toolsInitPath=$(dirname $(dirname $liveInit))
    cat > /newroot/$rclocal <<EOF
#!/bin/bash
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH
mkdir -p /var/lock/subsys/
touch /var/lock/subsys/local
mount -a
source /$studio/$toolsInitPath/rc.local
ulimit -n 131072

# if we are in debian 7 (we have /etc/gdm3)
[ -d  /etc/gdm3 ] && service gdm3 start
exit 0
EOF

    chmod +x    /newroot/$rclocal

}
pipeSetup


echo "=============================================================="


umount /sys /proc
cp -rf /dev/console /newroot/dev/
cp -rf /dev/tty /newroot/dev/
cp -rf /dev/null /newroot/dev/
exec switch_root -c /dev/console /newroot /sbin/init


